import subprocess
import re
from tqdm import tqdm
import shlex

def get_video_duration(input_file):
    """L·∫•y th·ªùi l∆∞·ª£ng c·ªßa video b·∫±ng ffprobe"""
    result = subprocess.run(
        ["ffprobe", "-v", "error", "-show_entries",
         "format=duration", "-of",
         "default=noprint_wrappers=1:nokey=1", input_file],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    try:
        return float(result.stdout.strip())
    except ValueError:
        return None


def run_ffmpeg_with_progress(ffmpeg_cmd, input_file=None):
    """
    Ch·∫°y l·ªánh ffmpeg v·ªõi thanh ti·∫øn tr√¨nh.
    - ffmpeg_cmd: list ho·∫∑c string c·ªßa l·ªánh ffmpeg
    - input_file: ƒë∆∞·ªùng d·∫´n file ƒë·∫ßu v√†o ƒë·ªÉ l·∫•y th·ªùi l∆∞·ª£ng
    """

    # N·∫øu l√† chu·ªói th√¨ chuy·ªÉn th√†nh list
    if isinstance(ffmpeg_cmd, str):
        ffmpeg_cmd = shlex.split(ffmpeg_cmd)

    # In ra l·ªánh ffmpeg ƒë·ªÉ debug
    print("üìã FFmpeg Command:")
    print(" ".join(ffmpeg_cmd))  # In to√†n b·ªô l·ªánh ƒë·ªÉ d·ªÖ ki·ªÉm tra

    # L·∫•y th·ªùi l∆∞·ª£ng video n·∫øu c√≥
    duration = get_video_duration(input_file) if input_file else None
    if duration:
        progress_bar = tqdm(total=duration, unit="s", desc="Processing", dynamic_ncols=True)
    else:
        print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi l∆∞·ª£ng video. ƒêang ch·∫°y ffmpeg...")

    # Regex ƒë·ªÉ b·∫Øt th·ªùi gian trong log ffmpeg
    time_pattern = re.compile(r"time=(\d+):(\d+):(\d+)\.(\d+)")

    # M·ªü ti·∫øn tr√¨nh FFmpeg
    process = subprocess.Popen(ffmpeg_cmd, stderr=subprocess.PIPE, stdout=subprocess.DEVNULL, universal_newlines=True)

    stderr_log = []  # l∆∞u log l·ªói

    for line in process.stderr:
        stderr_log.append(line)  # l∆∞u l·∫°i ƒë·ªÉ in n·∫øu l·ªói
        match = time_pattern.search(line)
        if match and duration:
            h, m, s, ms = map(int, match.groups())
            current_time = h * 3600 + m * 60 + s + ms / 100
            progress_bar.n = min(current_time, duration)
            progress_bar.refresh()

    process.wait()

    if duration:
        progress_bar.n = duration
        progress_bar.refresh()
        progress_bar.close()

    if process.returncode != 0:
        print("\n‚ùå FFmpeg tr·∫£ v·ªÅ l·ªói:")
        print("".join(stderr_log))  # In to√†n b·ªô stderr
        raise RuntimeError("‚ùå ffmpeg b·ªã l·ªói. Ki·ªÉm tra l·∫°i l·ªánh.")

    print("‚úÖ Ho√†n th√†nh.")


